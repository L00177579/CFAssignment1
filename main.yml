AWSTemplateFormatVersion: 2010-09-09
#This is the CloudFormation template that will deploy the companies base VPC and all required resources.

Parameters:
  VPCTemplateURL:
    Description: s3 Bucket URL for the VPC cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/vpc.yml
  SubnetTemplateURL:
    Description: s3 Bucket URL for the Subnet cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/subnet.yml
  SSHKeyJumpBox:
    Description: Name of the SSH Key Pair for the EC2 Jump Box Instance
    Type: String
    Default: SSHKey
  SSHKeyApplication:
    Description: Name of the SSH Key Pair for the EC2 Application Instance
    Type: String
    Default: SSHKey
  SSHKeyFrontEnd:
    Description: Name of the SSH Key Pair for the EC2 Front End Instance
    Type: String
    Default: SSHKey
  SSHKeyDatabase:
    Description: Name of the SSH Key Pair for the EC2 Database Instance
    Type: String
    Default: SSHKey
  EC2ImageId:
    Description: The Image Id
    Type: String
    Default: ami-026b57f3c383c2eec
  EC2InstanceType:
    Description: s3 Bucket URL for the Subnet cloud formation template.
    Type: String
    Default: ami-026b57f3c383c2eec

Resources:
  #Our VPC nested stack
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref VPCTemplateURL
      Parameters:
        VPCCidrBlock: 10.10.0.0/16

  #Our subnet stack
  PublicSubnet1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: public
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        InternetGatewayReference: !GetAtt VPCStack.Outputs.InternetGatewayReference
        SelectAZ: 1
        CreateNATAndEIP: true
        SubnetCidrBlock: 10.10.3.0/24
        RouteCidrBlock: 0.0.0.0/0


  #This private subnet will return a reference to its created NAT Gateway
  PrivateSubnet1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: private
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        NATGatewayReference: !GetAtt PublicSubnet1.Outputs.StackNATGateway
        SelectAZ: 0
        CreateNATAndEIP: false #Only build the NAT for this one to save on costs
        SubnetCidrBlock: 10.10.1.0/24
        RouteCidrBlock: 0.0.0.0/0

  #Our subnet stack
  PrivateSubnet2:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: private
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        NATGatewayReference: !GetAtt PublicSubnet1.Outputs.StackNATGateway
        SelectAZ: 0
        CreateNATAndEIP: false
        SubnetCidrBlock: 10.10.2.0/24
        RouteCidrBlock: 0.0.0.0/0

  #Our subnet stack
  PublicSubnet2:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: public
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        InternetGatewayReference: !GetAtt VPCStack.Outputs.InternetGatewayReference
        SelectAZ: 1
        CreateNATAndEIP: false
        SubnetCidrBlock: 10.10.4.0/24
        RouteCidrBlock: 0.0.0.0/0

  #Need to enable SSH access for resources that require it.
  SSHPublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPCStack
    Properties:
      GroupName: !Join ['-', ["SecurityGroup", "SSH", !Ref "AWS::StackName"]]
      GroupDescription: Enable SSH via port 22 access 
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !GetAtt VPCStack.Outputs.VPCReference

  #The EC2 Jump Box. This will be used to SSH from the public subnet into the private subnet.
  EC2JumpBox:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2ImageId
      KeyName: !Ref SSHKeyJumpBox #Needed to authenticate onto this EC2 instance via SSH
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !GetAtt PublicSubnet1.Outputs.StackSubnet
        AssociatePublicIpAddress: true #ensure it has an public facing IP Address
        GroupSet: [ !Ref SSHPublicSecurityGroup ]
      
      Tags:
        - Key: Name
          Value: !Join ['-', ["EC2", "JumpBox", !Ref "AWS::StackName"]]

  #The EC2 application hosted in the private subnet
  EC2Application:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2ImageId
      KeyName: !Ref SSHKeyApplication #Needed to authenticate onto this EC2 instance via SSH
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !GetAtt PrivateSubnet1.Outputs.StackSubnet
        AssociatePublicIpAddress: false
        GroupSet: [ !Ref SSHPublicSecurityGroup ] 
      Tags:
        - Key: Name
          Value: !Join ['-', ["EC2", "Application", !Ref "AWS::StackName"]]

    #The EC2 Jump Box. This will be used to SSH from the public subnet into the private subnet.
  EC2FrontEnd:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2ImageId
      KeyName: !Ref SSHKeyFrontEnd #Needed to authenticate onto this EC2 instance via SSH
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !GetAtt PublicSubnet2.Outputs.StackSubnet
        AssociatePublicIpAddress: true #ensure it has an public facing IP Address
        GroupSet: [ !Ref SSHPublicSecurityGroup ]
      
      Tags:
        - Key: Name
          Value: !Join ['-', ["EC2", "JumpBox", !Ref "AWS::StackName"]]

  #The EC2 application hosted in the private subnet
  EC2Database:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2ImageId
      KeyName: !Ref SSHKeyDatabase #Needed to authenticate onto this EC2 instance via SSH
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        SubnetId: !GetAtt PrivateSubnet2.Outputs.StackSubnet
        AssociatePublicIpAddress: false
        GroupSet: [ !Ref SSHPublicSecurityGroup ] 
      Tags:
        - Key: Name
          Value: !Join ['-', ["EC2", "Application", !Ref "AWS::StackName"]]