AWSTemplateFormatVersion: 2010-09-09
#This is the CloudFormation template that will deploy the companies base VPC and all required resources.
#4 subnets, 2 private/2 public. 1 NAT Gateway.
#4 EC2 instances, JumpBox, Database, Front End, Application
Parameters:
  VPCTemplateURL:
    Description: s3 Bucket URL for the VPC cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/vpc.yml
  SubnetTemplateURL:
    Description: s3 Bucket URL for the Subnet cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/subnet.yml
  JumpBoxEC2TemplateURL:
    Description: s3 Bucket URL for the Jump Box cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/jumpbox.yml
  ApplicationEC2TemplateURL:
    Description: s3 Bucket URL for the Application cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/application.yml
  DBEC2TemplateURL:
    Description: s3 Bucket URL for the DB cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/database.yml
  FrontEndEC2TemplateURL:
    Description: s3 Bucket URL for the Front End cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/frontend.yml
  MySQLSecurityGroupTemplateURL:
    Description: s3 Bucket URL for the MySQL Security Group cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/mysql_sg.yml
  SSHKeyJumpBox:
    Description: Name of the SSH Key Pair for the EC2 Jump Box Instance
    Type: String
    Default: SSHKey
  SSHKeyApplication:
    Description: Name of the SSH Key Pair for the EC2 Application Instance
    Type: String
    Default: SSHKey
  SSHKeyFrontEnd:
    Description: Name of the SSH Key Pair for the EC2 Front End Instance
    Type: String
    Default: SSHKey
  SSHKeyDatabase:
    Description: Name of the SSH Key Pair for the EC2 Database Instance
    Type: String
    Default: SSHKey
  EC2ImageId:
    Description: The AMI for the EC2 instances; region based. Keep entry blank to attempt to automatically apply AMI based on region.
    Type: String
    Default: ""
  EC2InstanceType:
    Description: >-
      Enter one of the default sizes: t1.micro or t2.micro. The default is set as t2.micro.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
    ConstraintDescription: >-
      Only t1.micro or t2.micro is available (Due to costs).

Mappings:
  #Just a handful of regions too many to list but additional entries can be added as needed.
  #Can be overridden by using the EC2ImageId parameter.
  #These are free tier AMIs if using the t1.micro or t2.micro instance types.
  AMIRegionImage:
    eu-west-1: #Ireland
      AMIId: "ami-0ee415e1b8b71305f"
    eu-central-1: #Frankfurt
      AMIId: "ami-070b208e993b59cea"
    us-east-1: #N. Virginia
      AMIId: "ami-09d3b3274b6c5d4aa"
    us-east-2: #Ohio
      AMIId: "ami-089a545a9ed9893b6"
    us-west-1: #N. California
      AMIId: "ami-017c001a88dd93847"
    us-west-2: #Oregon
      AMIId: "ami-0d593311db5abb72b"
  
Conditions:
  FindAMIByRegion: !Equals [ !Ref EC2ImageId, "" ] #Condition to use the Mapping instead of the passed in value

Resources:
  #Our VPC stack.
  #This will output a VPC Id reference and an InternetGateway Id reference.
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref VPCTemplateURL
      Parameters:
        VPCCidrBlock: 10.10.0.0/16

  #The first public subnet.
  #This subnet will create the the NAT Gateway to be used by the private subnets.
  #This NAT Gateway will be returned as an output.
  PublicSubnet1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: public
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        InternetGatewayReference: !GetAtt VPCStack.Outputs.InternetGatewayReference
        SelectAZ: 1
        CreateNATAndEIP: true
        SubnetCidrBlock: 10.10.3.0/24
        RouteCidrBlock: 0.0.0.0/0

  PrivateSubnet1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: private
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        NATGatewayReference: !GetAtt PublicSubnet1.Outputs.StackNATGateway
        SelectAZ: 0
        CreateNATAndEIP: false #Only build the NAT for this one to save on costs
        SubnetCidrBlock: 10.10.1.0/24
        RouteCidrBlock: 0.0.0.0/0

  PrivateSubnet2:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: private
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        NATGatewayReference: !GetAtt PublicSubnet1.Outputs.StackNATGateway
        SelectAZ: 0
        CreateNATAndEIP: false
        SubnetCidrBlock: 10.10.2.0/24
        RouteCidrBlock: 0.0.0.0/0

  PublicSubnet2:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: public
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        InternetGatewayReference: !GetAtt VPCStack.Outputs.InternetGatewayReference
        SelectAZ: 1
        CreateNATAndEIP: false
        SubnetCidrBlock: 10.10.4.0/24
        RouteCidrBlock: 0.0.0.0/0

  #MySQL Security Group
  MySQLSG:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref MySQLSecurityGroupTemplateURL
      Parameters:
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference

  EC2JumpBox1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref JumpBoxEC2TemplateURL
      Parameters:
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        SubnetReference: !GetAtt PublicSubnet1.Outputs.StackSubnet
        EC2InstanceType: !Ref EC2InstanceType
        SSHKeyName: !Ref SSHKeyJumpBox
        EC2ImageId: !If [ FindAMIByRegion, !FindInMap [ AMIRegionImage, !Ref "AWS::Region", AMIId ], !Ref EC2ImageId ] #Find a suitable AMI based on the region, override with passed in AMI

  EC2Application1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref ApplicationEC2TemplateURL
      Parameters:
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        SubnetReference: !GetAtt PrivateSubnet1.Outputs.StackSubnet
        EC2InstanceType: !Ref EC2InstanceType
        SSHKeyName: !Ref SSHKeyApplication
        EC2ImageId: !If [ FindAMIByRegion, !FindInMap [ AMIRegionImage, !Ref "AWS::Region", AMIId ], !Ref EC2ImageId ] #Find a suitable AMI based on the region, override with passed in AMI
        JumpBoxSecurityGroupReference: !GetAtt EC2JumpBox1.Outputs.StackJumpBoxSecurityGroup

  EC2Database1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref DBEC2TemplateURL
      Parameters:
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        SubnetReference: !GetAtt PrivateSubnet1.Outputs.StackSubnet
        EC2InstanceType: !Ref EC2InstanceType
        SSHKeyName: !Ref SSHKeyDatabase
        EC2ImageId: !If [ FindAMIByRegion, !FindInMap [ AMIRegionImage, !Ref "AWS::Region", AMIId ], !Ref EC2ImageId ] #Find a suitable AMI based on the region, override with passed in AMI
        JumpBoxSecurityGroupReference: !GetAtt EC2JumpBox1.Outputs.StackJumpBoxSecurityGroup
        InboundDatabaseSecurityGroupReference: !GetAtt MySQLSG.Outputs.StackMySQLInboundSecurityGroup

  EC2FrontEnd1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref FrontEndEC2TemplateURL
      Parameters:
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        SubnetReference: !GetAtt PublicSubnet2.Outputs.StackSubnet
        EC2InstanceType: !Ref EC2InstanceType
        SSHKeyName: !Ref SSHKeyFrontEnd
        EC2ImageId: !If [ FindAMIByRegion, !FindInMap [ AMIRegionImage, !Ref "AWS::Region", AMIId ], !Ref EC2ImageId ] #Find a suitable AMI based on the region, override with passed in AMI
        JumpBoxSecurityGroupReference: !GetAtt EC2JumpBox1.Outputs.StackJumpBoxSecurityGroup
        OutboundDBSecurityGroupReference: !GetAtt MySQLSG.Outputs.StackMySQLOutboundSecurityGroup
        