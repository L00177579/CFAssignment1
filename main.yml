AWSTemplateFormatVersion: 2010-09-09
#This is the CloudFormation template that will deploy the companies base VPC and all required resources.

Parameters:
  VPCTemplateURL:
    Description: s3 Bucket URL for the VPC cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/vpc.yml
  SubnetTemplateURL:
    Description: s3 Bucket URL for the Subnet cloud formation template.
    Type: String
    Default: https://cf-templates-1ptll2eogk9j2-us-east-1.s3.amazonaws.com/subnet.yml

Resources:
  #Our VPC nested stack
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref VPCTemplateURL
      Parameters:
        VPCCidrBlock: 10.10.0.0/16

  #Our subnet stack
  PrivateSubnet1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: private
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        InternetGatewayReference: !GetAtt VPCStack.Outputs.InternetGatewayReference
        SelectAZ: 0
        CreateNATAndEIP: true #Only build the NAT for this one to save on costs
        SubnetCidrBlock: 10.10.1.0/24
        RouteCidrBlock: 0.0.0.0/0

  #Our subnet stack
  PrivateSubnet2:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: private
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        InternetGatewayReference: !GetAtt VPCStack.Outputs.InternetGatewayReference
        NATGatewayReference: !GetAtt PrivateSubnet1.Outputs.StackNATGateway #Pass in the previously created NAT Gateway, cost saving!
        SelectAZ: 0
        CreateNATAndEIP: false
        SubnetCidrBlock: 10.10.2.0/24
        RouteCidrBlock: 0.0.0.0/0

  #Our subnet stack
  PublicSubnet1:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: public
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        InternetGatewayReference: !GetAtt VPCStack.Outputs.InternetGatewayReference
        SelectAZ: 1
        CreateNATAndEIP: false
        SubnetCidrBlock: 10.10.3.0/24
        RouteCidrBlock: 0.0.0.0/0

  #Our subnet stack
  PublicSubnet2:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      TemplateURL: !Ref SubnetTemplateURL
      Parameters:
        SubnetType: public
        VPCReference: !GetAtt VPCStack.Outputs.VPCReference
        InternetGatewayReference: !GetAtt VPCStack.Outputs.InternetGatewayReference
        SelectAZ: 1
        CreateNATAndEIP: false
        SubnetCidrBlock: 10.10.4.0/24
        RouteCidrBlock: 0.0.0.0/0

  # VPC:
  #   Type: AWS::EC2::VPC
  #   Properties: 
  #     CidrBlock: 10.10.0.0/16
  #     EnableDnsHostnames: true #Allow our resources within VPC to use DNS hostnames in addition to IP Addresses
  #     EnableDnsSupport: true
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['-', ["VPC", !Ref "AWS::StackName"]]

  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway
  #   DependsOn: VPC

  # VPCGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #     InternetGatewayId: !Ref InternetGateway
  #     VpcId: !Ref VPC
  
  # PublicSubnet:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     CidrBlock: 10.10.1.0/24
  #     AvailabilityZone: !Select [0, !GetAZs ] #Select the first Availability Zone in the list available to the current region
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['-', ["Private", "Subnet", !Ref "AWS::StackName"]]
      
  # PrivateSubnet:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     CidrBlock: 10.10.100.0/24
  #     AvailabilityZone: !Select [0, !GetAZs ] #Select the first Availability Zone in the list available to the current region
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['-', ["Private", "Subnet", !Ref "AWS::StackName"]]

  # #Public NAT Gateways require an Elastic IP Address
  # NatEIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: VPC

  # #NAT gateway needed for our private subnet instances can connect to services outside of the VPC. 
  # NATGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatEIP.AllocationId #Our elastic ip address
  #     ConnectivityType: public
  #     SubnetId: !Ref PublicSubnet
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['-', ["NATGateway", !Ref "AWS::StackName"]]

  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['-', ["Public", "RouteTable", !Ref "AWS::StackName"]]

  # PublicRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: VPCGatewayAttachment #This resources requires a gateway attachment, this will ensure it's created first
  #   Properties:
  #     DestinationCidrBlock: 0.0.0.0/0 #The internet!
  #     GatewayId: !Ref InternetGateway
  #     RouteTableId: !Ref PublicRouteTable
  
  # PublicSubnetRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref PublicSubnet

  # PrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['-', ["Private", "RouteTable", !Ref "AWS::StackName"]]

  # PrivateRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: VPCGatewayAttachment #This resources requires a gateway attachment, this will ensure it's created first
  #   Properties:
  #     DestinationCidrBlock: 0.0.0.0/0 #The internet!
  #     NatGatewayId: !Ref NATGateway
  #     RouteTableId: !Ref PrivateRouteTable

  # PrivateSubnetRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref PrivateSubnet

  # #Need to enable SSH access for resources that require it.
  # SSHSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   DependsOn: VPCGatewayAttachment
  #   Properties:
  #     GroupName: !Join ['-', ["SecurityGroup", "SSH", !Ref "AWS::StackName"]]
  #     GroupDescription: Enable SSH via port 22 access 
  #     SecurityGroupIngress:
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: 22
  #         IpProtocol: tcp
  #         ToPort: 22
  #     VpcId: !Ref VPC

  # #The EC2 Jump Box. This will be used to SSH from the public subnet into the private subnet.
  # EC2JumpBox:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: "ami-026b57f3c383c2eec"
  #     InstanceType: t2.micro
  #     SecurityGroupIds:
  #     - !Ref SSHSecurityGroup
  #     SubnetId: !Ref PublicSubnet
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['-', ["EC2", "JumpBox", !Ref "AWS::StackName"]]

  # #The EC2 application hosted in the private subnet
  # EC2Application:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: "ami-026b57f3c383c2eec"
  #     InstanceType: t2.micro
  #     SecurityGroupIds:
  #     - !Ref SSHSecurityGroup
  #     SubnetId: !Ref PrivateSubnet
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['-', ["EC2", "Application", !Ref "AWS::StackName"]]